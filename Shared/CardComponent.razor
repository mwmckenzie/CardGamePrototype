@using CaptrsCardGamePrototype.Models
@using System.Text.Encodings.Web
@using CaptrsCardGamePrototype.Services

@if (cardBase != null) {
    
    <MudContainer MaxWidth="MaxWidth.ExtraSmall">
        <MudCard Style="max-height: 75vh">
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Color="Color.Secondary">
                        <MudIcon Icon="@cardBase.icon"/>
                    </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <CardBaseInfo cardBaseInfo="@cardBase"/>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudTooltip Text="Send To Card Editor">
                        <MudIconButton OnClick="@onSettingsClickCallback" 
                                       Icon="@Icons.Material.Filled.Settings" 
                                       Color="Color.Default"/>
                    </MudTooltip>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent >
                <MudPaper Height="45vh" Class="flex-nowrap gap-4 overflow-auto flex-column pa-1">
                @* <div id="unique_id_scroll_section" *@
                @*      class="ma-0 flex-nowrap overflow-auto flex-column gap-2"> *@

                    @if (cardBase.textContentSections != null)
                    {
                        foreach (var textSection in cardBase.textContentSections)
                        {
                            <MudText Class="pa-4" Typo="Typo.body1" Style="min-height: 0">
                                @if (!cardBase.isSpecialText)
                                {
                                    @textSection
                                }
                                @if (cardBase.isSpecialText)
                                {
                                    @((MarkupString)textSection)
                                }
                                @* @((MarkupString) textSection) *@
                            </MudText>
                        }
                    }
                @* </div> *@
                </MudPaper>
            </MudCardContent>
            
            <MudCardActions>
                <MudTooltip Text="Show Pathogen Details">
                    <MudIconButton Icon="@Icons.Material.Filled.BugReport" Color="Color.Default" OnClick="OnDisplayPathogenViewClicked"/>
                </MudTooltip>
                <MudTooltip Text="Show Map">
                    <MudIconButton Icon="@Icons.Material.Filled.Map" Color="Color.Default" OnClick="OnDisplayMapClicked"/>
                </MudTooltip>
            </MudCardActions>
            
        </MudCard>
    </MudContainer>
}



@code {
    
    [Parameter]
    public CardBaseObj? cardBase { get; set; }

    private bool _stateToggle;

    [Parameter]
    public bool stateToggle {
        get => _stateToggle;
        set {
            _stateToggle = value;
            OnStateChangedEvent();
        }
    }
    
    [Parameter]
    public EventCallback<MouseEventArgs> onSettingsClickCallback { get; set; }

    [Parameter]
    public string mapFilename { get; set; } = "img/map-main.png";

    [Parameter]
    public EventCallback<string> mapDisplayRequested { get; set; }
    
    [Parameter]
    public EventCallback pathogenViewRequested { get; set; }
    
    private void OnStateChangedEvent() {
        StateHasChanged();
    }
    
    private async Task OnDisplayMapClicked()
    {
        await mapDisplayRequested.InvokeAsync(mapFilename);
    }
    
    private async Task OnDisplayPathogenViewClicked()
    {
        await pathogenViewRequested.InvokeAsync();
    }
    
}