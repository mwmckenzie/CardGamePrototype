@page "/PathogenEditor"
@using CaptrsCardGamePrototype.Models
@using CaptrsCardGamePrototype.Services

@inject CardDataService _cardDataService
@inject DbService _dbService
@inject HttpClient _http
@inject ISnackbar _snackbar

<MudText Class="pa-4 ma-4" Typo="Typo.h3" >Pathogen Editor</MudText>

<MudPaper Class="pa-4 ma-4">
    <MudStack Row="true">
        <MudText Class="my-4" Typo="Typo.h6" Color="Color.Primary">Reload Pathogen From Local File</MudText>
        <MudSpacer/>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="TryLoadPathogenFromLocal">Reload</MudButton>
    </MudStack>
</MudPaper>

<MudPaper Class="pa-4 ma-4">
    <MudStack Row="true">
        <MudText Class="my-2" Typo="Typo.h6" Color="Color.Primary">Reload Pathogen From Web API</MudText>
        <MudSpacer/>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="TryLoadPathogenFromWeb">Reload</MudButton>
    </MudStack>
    <MudTextField @bind-Value="@url" Variant="Variant.Outlined" Label="URL"/>
</MudPaper>


@* @if (!string.IsNullOrWhiteSpace(_cardDataService.apiReponseText)) { *@
@*     <MudText>@_cardDataService.apiReponseText</MudText> *@
@* } *@



@if (_pathogenDb.pathogenSetForEditing is not null) {
    <PathogenEditSections @bind-pathogen="@_pathogenDb.pathogenSetForEditing" 
                          acuteSymptomsList="@_cardDataService.acuteSymptoms"
                          onSubmitClickCallback="TryCreateOrUpdateToDb"
                          onCloneClickCallback="CloneAndSetToEditor"
                          onClearClickCallback="ClearAndSetNewToEditor"/>
}

@code {
    
    [Parameter] 
    public Pathogen? pathogen { get; set; }

    private PathogenDbState _pathogenDb;

    private bool _isSendingObjToDb = false;
    
    private string? url = "https://raw.githubusercontent.com/mwmckenzie/vigilant-carnival/main/json/Influenza_A_H9N2_02.json";
    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        await _cardDataService.Init(_http);
        
        pathogen = _cardDataService.pathogen;
        if (pathogen is null) {
            return;
        }
        pathogen.url = "https://en.wikipedia.org/wiki/Influenza_A_virus_subtype_H9N2";

        _pathogenDb = _dbService.pathogenDb;
    }

    

    private async Task TryLoadPathogenFromWeb() {
        if (string.IsNullOrWhiteSpace(url)) {
            return;
        }
        await _cardDataService.LoadPathogenFromWeb(url);
        pathogen = _cardDataService.pathogen;
        StateHasChanged();
    }
    
    private async Task TryLoadPathogenFromLocal() {
        await _cardDataService.LoadPathogenFromLocal();
        pathogen = _cardDataService.pathogen;
        StateHasChanged();
    }

    private async Task TryCreateOrUpdateToDb()
    {
        if (_pathogenDb.pathogenSetForEditing is null || _isSendingObjToDb)
        {
            return;
        }
        _isSendingObjToDb = true;
        AddSnackBarUpdate("Pathogen Submitted To DB", Severity.Info);
        var response = await _pathogenDb.SubmitEditsToDbAsync();
        _isSendingObjToDb = false;
        if (response)
        {
            AddSnackBarUpdate("Pathogen Submission To DB Successful");
        }
        else
        {
            AddSnackBarUpdate("Pathogen Submission To DB Unsuccessful", Severity.Error);
        }
    }

    private void CloneAndSetToEditor()
    {
        if (_pathogenDb.pathogenSetForEditing is null)
        {
            return;
        }
        _pathogenDb.pathogenSetForEditing = (Pathogen) _pathogenDb.pathogenSetForEditing.Clone();
        _pathogenDb.pathogenSetForEditing.id = Guid.NewGuid().ToString();
        _pathogenDb.pathogenSetForEditing.typeName += " (Copy)";
        AddSnackBarUpdate("Pathogen Cloned and Set To Editor");
    }

    private void ClearAndSetNewToEditor()
    {
        _pathogenDb.BuildNewAndSetToEditor();
        AddSnackBarUpdate("Pathogen Fields Cleared and New Pathogen Created");
    }
    
    private void AddSnackBarUpdate(string text, Severity severity = Severity.Success) {
        _snackbar.Clear();
        _snackbar.Add(text, severity, config =>
        {
            config.RequireInteraction = true;
            config.CloseAfterNavigation = true;
            config.ShowCloseIcon = false;
            config.Onclick = _ => Task.CompletedTask;
        });
    }
}