@page "/PathogenDbView"
@using CaptrsCardGamePrototype.Models
@using CaptrsCardGamePrototype.Services

@inject HttpClient _http
@inject DbService _dbService
@inject ISnackbar _snackbar

<MudText Class="pa-4 ma-4" Typo="Typo.h3" >Pathogen Database</MudText>

@if (isLoading)
{
    <MudText Class="pa-4 ma-4" Typo="Typo.h3">LOADING DATABASE</MudText>
    <MudProgressLinear Color="Color.Secondary" Indeterminate="true"/>
}
else
{
    @if (_pathogens is not null && _pathogens.Count > 0)
    {
        
        <div class="mx-auto"  style="max-width: 400px;">
            <MudExpansionPanels>
                
            @foreach (var pathogen in _pathogens)
            {
                <MudExpansionPanel>
                    <TitleContent>
                        <div class="d-flex">
                            <MudIcon Color="Color.Primary" 
                                     Icon="@Icons.Material.Filled.Info" 
                                     class="mr-3"/>
                            <MudText>@pathogen.typeName</MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <PathogenDetails pathogen="pathogen" 
                                         onEditClickCallback="() => SetSelectedPathogenToEditor(pathogen)"
                                         onCopyClickCallback="() => CopySelectedPathogenToEditor(pathogen)"
                                         onDeleteClickCallback="() => DeleteAsync(pathogen)"/>
                    </ChildContent>
                </MudExpansionPanel>
                @* <MudDivider Class="my-6" DividerType="DividerType.Middle" Light="true"/> *@
            }
        
            </MudExpansionPanels>
        </div>
        }
    else if (_pathogens is not null && _pathogens.Count > 0)
    {
        <MudText Class="pa-4 ma-4" Typo="Typo.h3" >Pathogen Database Empty</MudText>
    }
    else
    {
        <MudText Class="pa-4 ma-4" Typo="Typo.h3" >Pathogen Database Not Found</MudText>
    }
    
}

@code {

    private const string ServiceEndpoint = 
        "https://pathogensapi.azurewebsites.net/api/pathogen?code=cdtNGBg2z0nHTUzTzEAxHqVuIsCyOnmZEULRaguOPvfYAzFus8dMCQ==";
    
    private List<Pathogen>? _pathogens;
    private Pathogen _editItem = new();
    private string _editRowStyle = "none";
    private string? _newItemName;
    
    private bool isLoading { get; set; }
    private bool isLoaded { get; set; }

    private PathogenDbState _pathogenDb { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        _pathogenDb = _dbService.pathogenDb;
        _pathogens = _pathogenDb.loadedPathogens ?? new();

        await GetItems();
    }

    private async Task GetItems()
    {
        if (!_pathogenDb.isLoaded)
        {
            isLoading = true;
        }
        await _pathogenDb.GetAllFromDb();
        _pathogens = _pathogenDb.loadedPathogens ?? new();
        
        UpdateLoadingState(_pathogenDb);
    }

    private void UpdateLoadingState(DbState dbState)
    {
        isLoading = dbState.isLoading;
        isLoaded = dbState.isLoaded;
        StateHasChanged();
    }
      
    private void SetSelectedPathogenToEditor(Pathogen pathogen) {
        _pathogenDb.pathogenSetForEditing = pathogen;
        AddSnackBarUpdate($"{pathogen} Sent To Pathogen Editor!");
    }
    
    private void CopySelectedPathogenToEditor(Pathogen pathogen) {
        //_pathogenDb.pathogenSetForEditing = (Pathogen) pathogen.Clone();
        _pathogenDb.pathogenSetForEditing = pathogen;
        _pathogenDb.CloneAndSetToEditor();
        AddSnackBarUpdate($"{pathogen} Clone Sent To Pathogen Editor!");
    }
    
    private async Task DeleteAsync(Pathogen pathogen) {
        _pathogenDb.pathogenSetForDeleting = pathogen;
        AddSnackBarUpdate($"Attempting to Delete {pathogen}", Severity.Info);
        if (await _pathogenDb.DeleteFromDbAsync())
        {
            AddSnackBarUpdate($"{pathogen} Deleted From Database");
            return;
        }
        AddSnackBarUpdate($"Failed to Delete {pathogen}", Severity.Error);
    }

    private void AddSnackBarUpdate(string text, Severity severity = Severity.Success) {
        _snackbar.Clear();
        _snackbar.Add(text, severity, config =>
        {
            config.RequireInteraction = true;
            config.CloseAfterNavigation = true;
            config.ShowCloseIcon = false;
            config.Onclick = _ => Task.CompletedTask;
        });
    }

}