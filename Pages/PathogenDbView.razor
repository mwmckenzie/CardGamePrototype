@page "/PathogenDbView"
@using CaptrsCardGamePrototype.Models
@using CaptrsCardGamePrototype.Services

@inject HttpClient _http
@inject DbService _dbService

<MudText Class="pa-4 ma-4" Typo="Typo.h3" >Pathogen Database</MudText>

@if (isLoading)
{
    <MudText Class="pa-4 ma-4" Typo="Typo.h3">LOADING DATABASE</MudText>
    <MudProgressLinear Color="Color.Secondary" Indeterminate="true"/>
}
else
{
    @if (isLoaded)
    {
        @foreach (var pathogen in _pathogens)
        {
            <PathogenDetails pathogen="pathogen"/>
            <MudDivider Class="my-6" DividerType="DividerType.Middle" Light="true"/>
        }
    }
    else
    {
        <MudText Class="pa-4 ma-4" Typo="Typo.h3" >Pathogen Database Not Found</MudText>
    }
}

@code {

    private const string ServiceEndpoint = 
        "https://pathogensapi.azurewebsites.net/api/pathogen?code=cdtNGBg2z0nHTUzTzEAxHqVuIsCyOnmZEULRaguOPvfYAzFus8dMCQ==";
    
    private List<Pathogen>? _pathogens;
    private Pathogen _editItem = new();
    private string _editRowStyle = "none";
    private string? _newItemName;
    
    private bool isLoading { get; set; }
    private bool isLoaded { get; set; }

    private PathogenDbState _pathogenDb { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        _pathogenDb = _dbService.pathogenDb;
        
        _pathogens = new();
        await GetItems();
        
    }

    private async Task GetItems()
    {
        UpdateLoadingState(_pathogenDb);
        
        await _pathogenDb.GetAllFromDb();
        _pathogens = _pathogenDb.loadedPathogens;
        
        UpdateLoadingState(_pathogenDb);
    }

    private void UpdateLoadingState(DbState dbState)
    {
        isLoading = dbState.isLoading;
        isLoaded = dbState.isLoaded;
        StateHasChanged();
    }
       
        
        //_pathogens = await _http.GetFromJsonAsync<List<Pathogen>>(ServiceEndpoint);

}