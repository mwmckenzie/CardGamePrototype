@page "/"
@using CaptrsCardGamePrototype.Models
@using CaptrsCardGamePrototype.Services
@using CaptrsCardGamePrototype.ViewModels

@inject CardDataService _cardDataService
@inject TextContentBuilder _textContentBuilder
@inject HttpClient _http
@inject ISnackbar _snackbar


<PageTitle>CAPTRS Web Prototypes - Home</PageTitle>

@if (_cardDataService.cards.Count > 0) {
    <MudCarousel Class="mud-width-full my-2" 
                 Style="height:85vh;"
                 ShowArrows="@_arrows" 
                 ShowBullets="@_bullets"
                 EnableSwipeGesture="@_enableSwipeGesture"
                 AutoCycle="@_autocycle" 
                 TData="object">
    
        @foreach (var card in _cardDataService.cards) {
            <MudCarouselItem Transition="_transition">
                <div class="d-flex my-2" style="height:100%">
                    <CardComponent mapDisplayRequested="@mapOverlay.DisplayMap" 
                                   pathogenViewRequested="@pathogenSideVM.DisplaySideView"
                                   cardBase="card" 
                                   onSettingsClickCallback="() => SetSelectedCardToEditor(card)"/>
                </div>
            </MudCarouselItem>
        }
    </MudCarousel>
    
    <MudSelect @bind-Value="_transition" Label="Transition" Class="ma-2">
        <MudSelectItem Value="@Transition.Fade">Fade</MudSelectItem>
        <MudSelectItem Value="@Transition.Slide">Slide</MudSelectItem>
        <MudSelectItem Value="@Transition.None">None</MudSelectItem>
    </MudSelect>
    <MudSwitch @bind-Checked="@_arrows" Color="Color.Primary">Show Arrows</MudSwitch>
    <MudSwitch @bind-Checked="@_bullets" Color="Color.Primary">Show Bullets</MudSwitch>
    <MudSwitch @bind-Checked="@_enableSwipeGesture" Color="Color.Primary">Enable Swap Gesture</MudSwitch>
    <MudSwitch @bind-Checked="@_autocycle" Color="Color.Primary">Auto Cycle (Default: 5 secs)</MudSwitch>
}

<MapOverlay @bind-mapOverlayVM="@mapOverlay"/>
<PathogenSideView sideViewVM="pathogenSideVM" pathogen="_cardDataService.pathogen" />


@code {

    [Parameter]
    public CardBaseObj? cardBase { get; set; } = new();
    
    [Parameter]
    public string? objTitle { get; set; }
    
    private bool _arrows = true;
    private bool _bullets = true;
    private bool _enableSwipeGesture = true;
    private bool _autocycle = true;
    private Transition _transition = Transition.Slide;

    private List<string> textSections01 { get; set; } = new();
    private List<string> textSections02 { get; set; } = new();
    private List<string> textSections03 { get; set; } = new();

    private List<List<string>> textSections { get; set; } = new();

    public MapOverlayViewModel mapOverlay { get; set; } = new();
    public SideViewViewModel pathogenSideVM { get; set; } = new();
    
    // public string mapFilename { get; set; }
    // public bool mapOverlayIsVisible { get; set; }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        if (_cardDataService.loadComplete) {return;}
        
        await _cardDataService.Init(_http);

        _textContentBuilder.textLookUps = _cardDataService.textSectionLookUps;
        _textContentBuilder.textLookUps.SetLookUpDict("reportCard01_01");
        foreach (var loadedTextSection in _cardDataService.loadedTextSections) {
            textSections01.Add(_textContentBuilder.BuildTextContent(loadedTextSection));
        }
        textSections.Add(textSections01);
        
        _textContentBuilder.textLookUps.SetLookUpDict("reportCard01_04");
        foreach (var loadedTextSection in _cardDataService.loadedTextSections) {
            textSections02.Add(_textContentBuilder.BuildTextContent(loadedTextSection));    
        }
        textSections.Add(textSections02);
        
        _textContentBuilder.textLookUps.SetLookUpDict("reportCard01_03");
        foreach (var loadedTextSection in _cardDataService.loadedTextSections) {
            textSections03.Add(_textContentBuilder.BuildTextContent(loadedTextSection));    
        }
        textSections.Add(textSections03);
        
        cardBase = new CardBaseObj() {
            isValid = true,
            name = "Sample Card",
            cardType = "Prototype",
        };

        var index = 0;
        foreach (var textSection in textSections) {
            var newCard = new CardBaseObj() {
                isValid = true,
                cardType = "Prototype",
                cardTitle = $"Sample Card (Variant {index + 1})",
                textContentSections = textSection
            };
            newCard.isSpecialText = true;
            _cardDataService.cards.Add(newCard);
            index++;
        }
        StateHasChanged();
    }

    private void SetSelectedCardToEditor(CardBaseObj cardBaseObj) {
        _cardDataService.editorCard = cardBaseObj;
        AddSnackBarUpdate($"{cardBaseObj} Sent To Card Editor!");
    }

    private void AddSnackBarUpdate(string text) {
        _snackbar.Clear();
        _snackbar.Add(text, Severity.Success, config =>
        {
            config.RequireInteraction = true;
            config.CloseAfterNavigation = true;
            config.ShowCloseIcon = false;
            config.Onclick = _ => Task.CompletedTask;
        });
    }

    // private void DisplayMap(string filename) {
    //     mapOverlay.DisplayMap(filename);
    //     mapFilename = filename;
    //     mapOverlayIsVisible = true;
    // }
    
}